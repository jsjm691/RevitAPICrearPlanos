<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>